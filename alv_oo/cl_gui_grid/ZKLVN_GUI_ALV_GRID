*&---------------------------------------------------------------------*
*& Report ZKLVN_GUI_ALV_GRID
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zklvn_gui_alv_grid.

* Tabelas Transparentes
TABLES:
  mara.

* Tabela Interna
DATA :
  it_mara   TYPE TABLE OF mara,
  it_marc   TYPE TABLE OF marc,
  st_layout TYPE lvc_s_layo.

* Objetos
DATA:
* Referenciando o objeto 'O_ALV' com a classe de ALV.
  o_alv            TYPE REF TO cl_gui_alv_grid,
  o_alv2           TYPE REF TO cl_gui_alv_grid,
* Vai separar o container
  splitter         TYPE REF TO cl_gui_splitter_container,
* Container customizado
  custom_container TYPE REF TO cl_gui_custom_container,
* Referenciando o objeto 'O_CONTAINER' com a classe de Container.
  o_container      TYPE REF TO cl_gui_container,
  o_container2     TYPE REF TO cl_gui_container.

DATA:
  gt_fieldcat  TYPE lvc_t_fcat,
  gt_fieldcat2 TYPE lvc_t_fcat.

* tela de seleção
SELECTION-SCREEN BEGIN OF BLOCK b1.
  SELECT-OPTIONS :
* Código do material
  s_matnr FOR mara-matnr.
SELECTION-SCREEN END   OF BLOCK b1.

* Inicio do processo
START-OF-SELECTION.
* Tela do ALV.
  CALL SCREEN 9001.

* Fim do processo
END-OF-SELECTION.


*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
  SET PF-STATUS 'S9001'.
  SET TITLEBAR 'T9001'.

  "  Eu fiz o perform de criar o alv no PBO da tela pra que na hora que
  " mostrar a tela já tenha o alv alimentado.
  PERFORM : f_alv.

ENDMODULE.                 " STATUS_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_9001 INPUT.

  CASE sy-ucomm.
    WHEN 'EXEC'.
      PERFORM : f_alv.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      LEAVE PROGRAM.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9001  INPUT


*&---------------------------------------------------------------------*
*&      Form  F_ALV
*&---------------------------------------------------------------------*
FORM f_alv .

*  Faz o select dos dados da mara.
  PERFORM : f_select_mara.

* Se o ALV ja foi instanciado...
  IF o_alv IS BOUND.
* Metodo da classe de alv atribuida ao objeto o_alv para limpar o objeto.
    o_alv->free( ).
  ENDIF.

*  Faz a criação do objecto do container passando o nome do Custom control
* para o parametro de exportação.
  CREATE OBJECT custom_container
    EXPORTING
      container_name = 'CC_ALV'.

  CREATE OBJECT splitter
    EXPORTING
      parent  = custom_container
      rows    = 1
      columns = 2
      align   = 15.

  CALL METHOD splitter->get_container
    EXPORTING
      row       = 1
      column    = 1
    RECEIVING
      container = o_container.

  CALL METHOD splitter->get_container
    EXPORTING
      row       = 1
      column    = 2
    RECEIVING
      container = o_container2.

*  Faz a criação do objeto do ALV passando o nome do Container que receberá
* o ALV
  CREATE OBJECT o_alv
    EXPORTING
      i_parent = o_container.

  CREATE OBJECT o_alv2
  EXPORTING
    i_parent = o_container2.

*  Alimenta a estrutura de Layout do alv.
  PERFORM f_layout_alv.

* Prepara o Fcat
  PERFORM f_prepare_fcat1 CHANGING gt_fieldcat.

*  Exibe alv conforme seus parametros
  PERFORM f_display_alv.

* Prepara o Fcat
  PERFORM f_prepare_fcat2 CHANGING gt_fieldcat2.

*  Exibe alv conforme seus parametros
  PERFORM f_display_alv2.

ENDFORM.                    " F_ALV


*&---------------------------------------------------------------------*
*&      Form  F_SELECT_MARA
*&---------------------------------------------------------------------*
FORM f_select_mara .

  SELECT *
  FROM mara
  INTO TABLE it_mara
  WHERE matnr IN s_matnr.

  SELECT *
  FROM marc
  INTO TABLE it_marc.

ENDFORM.                    " F_SELECT_MARA

*&---------------------------------------------------------------------*
*&      Form  F_PREPARE_FCAT1
*&---------------------------------------------------------------------*
FORM f_prepare_fcat1 CHANGING pt_fieldcat1 TYPE lvc_t_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'MARA'
*     I_INTERNAL_TABNAME     = 'IT_MARA'
    CHANGING
      ct_fieldcat            = pt_fieldcat1
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_DISPLAY_ALV
*&---------------------------------------------------------------------*
FORM f_display_alv.

  CALL METHOD o_alv->set_table_for_first_display
    EXPORTING
      i_structure_name              = 'MARA'
      i_save                        = 'A'
      i_default                     = 'X'
      is_layout                     = st_layout
    CHANGING
      it_outtab                     = it_mara
*      it_fieldcatalog               = gt_fieldcat
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_PREPARE_FCAT2
*&---------------------------------------------------------------------*
FORM f_prepare_fcat2 CHANGING pt_fieldcat2 TYPE lvc_t_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
  EXPORTING
    i_structure_name       = 'MARC'
*     I_INTERNAL_TABNAME     = 'IT_MARC'
  CHANGING
    ct_fieldcat            = pt_fieldcat2
  EXCEPTIONS
    inconsistent_interface = 1
    program_error          = 2
    OTHERS                 = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_DISPLAY_ALV2
*&---------------------------------------------------------------------*
FORM f_display_alv2.

  CALL METHOD o_alv2->set_table_for_first_display
  EXPORTING
    i_structure_name              = 'MARC'
    i_save                        = 'A'
    i_default                     = 'X'
    is_layout                     = st_layout
  CHANGING
    it_outtab                     = it_marc
*    it_fieldcatalog               = gt_fieldcat2
  EXCEPTIONS
    invalid_parameter_combination = 1
    program_error                 = 2
    too_many_lines                = 3
    OTHERS                        = 4.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LAYOUT_ALV
*&---------------------------------------------------------------------*
FORM f_layout_alv.

  st_layout-cwidth_opt = 'X'.
  st_layout-zebra = 'X'.

ENDFORM.                    " F_LAYOUT_ALV