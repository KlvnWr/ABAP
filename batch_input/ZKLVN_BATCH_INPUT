*&---------------------------------------------------------------------*
*& Report ZKLVN_BATCH_INPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zklvn_batch_input.

* Tipagem das tabelas que foram utilizadas

TYPES:
* Tabela para receber o arquivo csv
       BEGIN OF ty_csv,
         campo(200) TYPE c,
       END OF ty_csv,

       BEGIN OF ty_it_csv,
         nome     TYPE lfa1-name1,
         endereco TYPE lfa1-stras,
         cidade   TYPE lfa1-ort01,
         cep      TYPE lfa1-pfach,
         bairro   TYPE lfa1-ort02,
         estado   TYPE lfa1-regio,
       END OF ty_it_csv,

* Tabela de saída para a inserção na tabela transparente LFA1 e geração de relatório

       BEGIN OF ty_saida,
         contador(4)       TYPE c,
         nome              TYPE lfa1-name1,
         endereco          TYPE lfa1-stras,
         cidade            TYPE lfa1-ort01,
         cep               TYPE lfa1-pfach,
         bairro            TYPE lfa1-ort02,
         estado            TYPE lfa1-regio,
         num_fornecedor(8) TYPE c,
         status(8)         TYPE c,
         mensag_retorno    TYPE string,
       END OF ty_saida.

       " Work Áreas que foram utilizadas para processamento dos dados

DATA: wa_csv   TYPE ty_csv,
      wa_saida TYPE ty_saida,
      wa_bdc   TYPE bdcdata,                 " Mapeamento campos BDC
      wa_msg   TYPE bdcmsgcoll.              " Mensagens retorno BDC

        " Work Áreas que foram utilizadas para geração de relatório

DATA: wa_fieldcat TYPE slis_fieldcat_alv,
      wa_layout   TYPE slis_layout_alv.

        " Tabelas Internas

DATA: it_csv   TYPE TABLE OF ty_csv,
      it_saida TYPE TABLE OF ty_saida,
      it_bdc   TYPE TABLE OF bdcdata,        " Mapeamento campos BDC
      it_msg   TYPE TABLE OF bdcmsgcoll.     " Mensagens retorno BDC

DATA: it_fieldcat TYPE TABLE OF slis_fieldcat_alv.

" Constantes

CONSTANTS: cg_inicial_nome(3) TYPE c VALUE 'KWR',
           c_xk01             TYPE tstc-tcode VALUE 'XK01'.

" Tela de seleção para o recebimento do caminho do arquivo CSV

SELECTION-SCREEN BEGIN OF BLOCK b1.
  PARAMETERS p_arq TYPE rlgrap-filename OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.

" ON VALUE-REQUEST é para poder escolher o caminho utilizando a interface de pastas pelo Match Code ou F4.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_arq.
  PERFORM zf_buscar_caminho CHANGING p_arq.

" Sempre vai ser disparado por último

START-OF-SELECTION.
  PERFORM zf_selecionar_dados.
  PERFORM zf_carregar_arquivo USING p_arq.
  PERFORM zf_monta_tabela.
  PERFORM zf_carrega_t_bdc.
  PERFORM zf_preenche_fieldcat.
  PERFORM zf_ativa_alv.

" Form para selecionar os dados na hora de verificar se já existe um registro para que o número do próximo registro a ser inserido seja a partir do que já existe.

FORM zf_selecionar_dados.

  SELECT lifnr
    FROM lfa1
    INTO TABLE @DATA(it_lfa1)
    UP TO 1 ROWS
    WHERE lifnr LIKE 'KWR-%'
    ORDER BY lifnr DESCENDING.

ENDFORM.

" Form para buscar o caminho no computador através do caminho escolhido na tela de seleção

FORM zf_buscar_caminho CHANGING p_arq TYPE rlgrap-filename.

  CALL FUNCTION 'KD_GET_FILENAME_ON_F4'
    CHANGING
      file_name           = p_arq
   EXCEPTIONS
     MASK_TOO_LONG       = 1
     OTHERS              = 2
            .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.


ENDFORM.

"  Pega o arquivo externo relacionado e coloca os dados em uma tabela sem trata as informações.

FORM zf_carregar_arquivo USING p_arq TYPE rlgrap-filename.
  DATA l_filename TYPE string.

  l_filename = p_arq.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename                = l_filename " Endereço completo do arquivo com os dados
    TABLES
      data_tab                = it_csv " Tabela interna que receberá os dados.
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      OTHERS                  = 17.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

" Form para separar os dados desorganizados vindo do CSV.

FORM zf_monta_tabela.

  IF it_csv IS NOT INITIAL.
    LOOP AT it_csv INTO wa_csv.
      SPLIT wa_csv-campo AT ';' " Separa as informações em cada ';' e coloca em uma work área respectivamente
      INTO wa_saida-nome
           wa_saida-endereco
           wa_saida-cidade
           wa_saida-cep
           wa_saida-bairro
           wa_saida-estado.

      ADD 1 TO wa_saida-contador. " Add 1 no contador
      UNPACK wa_saida-contador TO wa_saida-contador. " Add zero a esquerda de acordo com o tamanho do char, no caso char04
      CONCATENATE cg_inicial_nome wa_saida-contador INTO wa_saida-num_fornecedor SEPARATED BY '-'. " Junta a constante inicial do nome com o contador separado por '-'.

      APPEND wa_saida TO it_saida. "Appenda os dados na tabela interna de saída.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM zf_carrega_t_bdc.

  REFRESH it_bdc.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '100'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'RF02K-KTOKK'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '/00'.
  PERFORM zf_bdc_campo USING 'RF02K-LIFNR' 'KWR-0001'.
        .
  PERFORM zf_bdc_campo USING 'RF02K-EKORG' '7000'.
  PERFORM zf_bdc_campo USING 'RF02K-KTOKK' 'BR01'.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '110'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'LFA1-PSTLZ'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '=VW'.
  PERFORM zf_bdc_campo USING 'LFA1-NAME1' wa_saida-nome.
  PERFORM zf_bdc_campo USING 'LFA1-STRAS' wa_saida-endereco.
  PERFORM zf_bdc_campo USING 'LFA1-ORT01' wa_saida-cidade.
  PERFORM zf_bdc_campo USING 'LFA1-PSTLZ' wa_saida-cep.
  PERFORM zf_bdc_campo USING 'LFA1-ORT02' wa_saida-bairro.
  PERFORM zf_bdc_campo USING 'LFA1-LAND1' 'BR'.
  PERFORM zf_bdc_campo USING 'LFA1-REGIO' wa_saida-estado.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '120'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'LFA1-KUNNR'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '=VW'.
  PERFORM zf_bdc_campo USING 'LFA1-TXJCD' 'SP'.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '130'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'LFBK-BANKS(01)'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '=VW'.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '380'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'KNVK-NAMEV(01)'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '=VW'.

  PERFORM zf_bdc_tela USING 'SAPMF02K' '310'.

  PERFORM zf_bdc_campo USING 'BDC_CURSOR' 'LFM1-ZTERM'.
  PERFORM zf_bdc_campo USING 'BDC_OKCODE' '=UPDA'.
  PERFORM zf_bdc_campo USING 'LFM1-ZTERM' '1'.

ENDFORM.

FORM zf_ativar_shdb.

CALL TRANSACTION c_xk01 USING it_bdc " Chama transação xk01 utilizando o modo 'E'.
                      MODE 'E' " Mostra apenas telas com erros
                      MESSAGES INTO it_msg.

ENDFORM.

FORM zf_bdc_tela USING p_program p_tela.

CLEAR wa_bdc.

wa_bdc-PROGRAM  = p_program. " Nome do programa
wa_bdc-DYNPRO   = p_tela. " Numero da tela
wa_bdc-dynbegin = 'X'. " Indica o começo de uma tela

APPEND wa_bdc TO it_bdc. " Insere registro na tabela interna de mapeamento

ENDFORM.

FORM zf_bdc_campo  USING p_campo p_valor.

* Limpa workarea do mapeamento
  CLEAR wa_bdc.
* Preenchendo linha do mapeamento
  wa_bdc-DYNPRO = space.   " Sem tela
  wa_bdc-fnam   = p_campo. " Nome do campo mapeado
  wa_bdc-fval   = p_valor. " Valor do campo mapeado
* Retira espaços a esquerda se houverem
  CONDENSE wa_bdc-fval.
* Insere registro na tabela interna de mapeamento
  APPEND wa_bdc TO it_bdc.

ENDFORM.

FORM zf_preenche_fieldcat.

  PERFORM zf_monta_alv USING:

        'CONTADOR'        'IT_SAIDA' ''      'LFA1' 'ID',
        'NOME'            'IT_SAIDA' 'NAME1' 'LFA1' '',
        'ENDERECO'        'IT_SAIDA' 'STRAS' 'LFA1' '',
        'CIDADE'          'IT_SAIDA' 'ORT01' 'LFA1' '',
        'CEP'             'IT_SAIDA' 'PFACH' 'LFA1' '',
        'BAIRRO'          'IT_SAIDA' 'ORT02' 'LFA1' '',
        'ESTADO'          'IT_SAIDA' 'REGIO' 'LFA1' '',
        'NUM_FORNECEDOR'  'IT_SAIDA' ''      'LFA1' 'Numero Fornecedor'.

ENDFORM.

FORM zf_monta_alv USING p_fieldname p_tabname p_ref_fieldname p_ref_tabname p_seltext.

CLEAR wa_fieldcat.
wa_fieldcat-fieldname = p_fieldname. " Campo como consta no codigo
wa_fieldcat-tabname = p_tabname. " Tabela de referência para saída
wa_fieldcat-ref_fieldname = p_ref_fieldname. " Campo de referência como está na tabela
wa_fieldcat-ref_tabname = p_ref_tabname. " Tabela de referência
wa_fieldcat-seltext_l = p_seltext. " Nome no cabeçalho
APPEND wa_fieldcat TO it_fieldcat.

ENDFORM.

FORM zf_ativa_alv.

  wa_layout-colwidth_optimize = 'X'. "Largura melhor possível coluna
  wa_layout-zebra = 'X'. " Linhas intercalam cores para ficar visivelmente mais facil de ler

CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY' " Gera alv
 EXPORTING
   I_CALLBACK_PROGRAM                = sy-repid
*   I_CALLBACK_PF_STATUS_SET          = ' '
*   I_CALLBACK_USER_COMMAND           = ' '
*   I_CALLBACK_TOP_OF_PAGE            = ' '
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
   IS_LAYOUT                         = wa_layout
   IT_FIELDCAT                       = it_fieldcat
  TABLES
    t_outtab                          = it_saida
 EXCEPTIONS
   PROGRAM_ERROR                     = 1
   OTHERS                            = 2
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.


ENDFORM.
